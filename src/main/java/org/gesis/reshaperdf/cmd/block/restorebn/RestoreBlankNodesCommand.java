/*
 * Copyright (C) 2017 GESIS.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, see 
 * http://www.gnu.org/licenses/ .
 */
package org.gesis.reshaperdf.cmd.block.restorebn;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.gesis.reshaperdf.cmd.boundary.CommandExecutionException;
import org.gesis.reshaperdf.cmd.boundary.CommandExecutionResult;
import org.gesis.reshaperdf.cmd.boundary.ICMD;
import org.gesis.reshaperdf.utils.CheckedNTriplesWriter;
import org.gesis.reshaperdf.utils.PullReader;
import org.openrdf.model.Resource;
import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.Value;
import org.openrdf.model.impl.StatementImpl;
import org.openrdf.model.impl.URIImpl;
import org.openrdf.rio.RDFHandlerException;

/**
 * @author Felix Bensmann Restores blank nodes in N-Triple files generated by
 * the ntriplify command.
 */
public class RestoreBlankNodesCommand implements ICMD {

    public String NAME = "restorebn";
    public String EXPLANATION = "Restores blank nodes in N-Triple files generated by the ntriplify command.";
    public String HELPTEXT = "Usage: " + NAME + " <input file> <output file>\n" + EXPLANATION;

    @Override
    public String getName() {
        return NAME;
    }

    @Override
    public String getExplanation() {
        return EXPLANATION;
    }

    @Override
    public String getHelptext() {
        return HELPTEXT;
    }

    /**
     * Executes this command. Reads the input file triple by triple, if it finds
     * a transcripted blank node the blank node will be restored by removing the
     * dummy URL-Part.
     *
     * @param args
     * @return
     * @throws CommandExecutionException
     */
    @Override
    public CommandExecutionResult execute(String[] args) throws CommandExecutionException {
        //check args
        if (args.length != 3) {
            return new CommandExecutionResult(false, "Invalid parameter count.");
        }
        File inFile = new File(args[1]);
        if (!inFile.exists() || !inFile.isFile()) {
            return new CommandExecutionResult(false, "Input file is not a valid file.");
        }
        File outFile = new File(args[2]);

        PullReader pReader;
        pReader = new PullReader(inFile);
        pReader.load();

        CheckedNTriplesWriter ctWriter = null;
        try {
            ctWriter = new CheckedNTriplesWriter(new FileOutputStream(outFile), null, false);
            ctWriter.startRDF();
        } catch (FileNotFoundException ex) {
            throw new CommandExecutionException(ex);
        } catch (RDFHandlerException ex) {
            throw new CommandExecutionException(ex);
        }

        Statement stmt = pReader.peek();
        while (stmt != null) {
            pReader.removeHead();

            Resource subject = stmt.getSubject();
            Value object = stmt.getObject();

            if (subject.stringValue().contains(CheckedNTriplesWriter.DUMMY_URL)) {
                subject = new URIImpl(subject.stringValue().replaceFirst(CheckedNTriplesWriter.DUMMY_URL, "_:"));
            }
            if (object instanceof URI) {
                if (object.stringValue().contains(CheckedNTriplesWriter.DUMMY_URL)) {
                    object = new URIImpl(object.stringValue().replaceFirst(CheckedNTriplesWriter.DUMMY_URL, "_:"));
                }
            }

            try {
                ctWriter.handleStatement(new StatementImpl(subject, stmt.getPredicate(), object));
            } catch (RDFHandlerException ex) {
                throw new CommandExecutionException(ex);
            }
            stmt = pReader.peek();
        }
        try {
            ctWriter.endRDF();
        } catch (RDFHandlerException ex) {
            throw new CommandExecutionException(ex);
        }
        return new CommandExecutionResult(true);
    }
}
